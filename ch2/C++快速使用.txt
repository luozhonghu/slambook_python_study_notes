
C++

# 入门

## 简单使用
第一步：生成一个文件 helloSLAM.cpp
#include <iostream>
using namespace std; 

int main( int argc, char** argv )
{
    cout<<"Hello SLAM!"<<endl;
    if (argc > 1){
        cout<<"包含输入参数："<<argv[1]<<endl;
    } else {
        cout << "没有输入参数" << endl;
    }
    return 0;
}

第二步：编译
g++ helloSLAM.cpp

g++ helloSLAM.cpp -o helloSLAM
// 如果没安装用这个安装  sudo apt-get install g++

第三步：执行
./a.out

## 使用 cmake CMakeLists.txt

第一步写入下面的内容


# 声明要求的 cmake 最低版本
cmake_minimum_required( VERSION 2.8 )

# 声明一个 cmake 工程
project( HelloSLAM )

# 设置编译模式
set( CMAKE_BUILD_TYPE "Debug" )

# 添加一个可执行程序
# 语法：add_executable( 程序名 源代码文件 ）
add_executable( helloSLAM helloSLAM.cpp )



# 添加一个库
add_library( hello1libHelloSLAM.cpp )
# 共享库
add_library( hello_shared SHARED libHelloSLAM.cpp )

add_executable( useHello useHello.cpp )
# 将库文件链接到可执行程序上
target_link_libraries( useHello hello_shared )


第二步：

在CMakeLists.txt 文件夹下面：
cmake .

make

后可以直接输入 原来cpp文件的文件名，例如

./helloSLAM

% 可以归纳 到一个文件夹
mkdir build
cd build
cmake ..
make


## 库的使用
库的使用类似编译一个方法，并不是执行文件，文件的需要 main 函数才是 执行，没有这个就是库


#### 每个可执行文件都要 添加到cmake 中的 add_executable( 程序名 源代码文件 ） 真的太麻烦可额

在Linux中,库文件分成静态库和共享库两种2。静态库以.a作为后缀名,共享库以.so结尾

然后还要把 库添加 ，再把共享库和他共享，然后再将库文件链接到可执行程序上 ，这些全部写到 cmake 文件中，然后执行cmake . 和 make 编译成 二进制文件，再 执行 二进制文件额，真的是麻烦的要死的



